// Generated by CoffeeScript 1.8.0
(function() {
  angular.module("Maze").controller("AppCtrl", [
    "$scope", "$pusher", function($scope, $pusher) {
      var HEIGHT, Square, WIDTH, canvas, clearCanvas, client, ctx, drawMaze, drawOne, drawSquares, img, pusher, rect, tiltChannel;
      client = new Pusher("77f6df16945f47c63a1f");
      pusher = $pusher(client);
      tiltChannel = pusher.subscribe("presence-tilt-channel");
      tiltChannel.bind("client-new-player", function(user) {
        return new Square(475, 5, user.colour);
      });
      tiltChannel.bind('pusher:member_removed', function(user) {
        return Square.all = _.without(Square.all, Square.colour(user.id));
      });
      tiltChannel.bind("client-tilt", function(user) {
        return Square.colour(user.colour).move(user.tilt);
      });
      WIDTH = HEIGHT = 1000;
      img = new Image();
      img.src = "assets/mazeone1000.gif";
      canvas = document.getElementById("canvas");
      ctx = canvas.getContext("2d");
      rect = function(x, y, w, h) {
        ctx.beginPath();
        ctx.rect(x, y, w, h);
        ctx.closePath();
        return ctx.fill();
      };
      drawMaze = function() {
        return ctx.drawImage(img, 0, 0);
      };
      clearCanvas = function() {
        return ctx.clearRect(0, 0, WIDTH, HEIGHT);
      };
      drawSquares = function() {
        var square, _i, _len, _ref, _results;
        clearCanvas();
        drawMaze();
        _ref = Square.all;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          square = _ref[_i];
          _results.push(drawOne(square));
        }
        return _results;
      };
      drawOne = function(square) {
        ctx.fillStyle = square.colour;
        return rect(square.x, square.y, 15, 15);
      };
      setInterval(drawSquares, 100);
      return Square = (function() {
        Square.all = [];

        Square.colour = function(colour) {
          return _.findWhere(this.all, {
            colour: colour
          });
        };

        function Square(x, y, colour) {
          this.x = x;
          this.y = y;
          this.colour = colour;
          this.dx = this.dy = 15;
          this.constructor.all.push(this);
        }

        Square.prototype.move = function(direction) {
          var boundLimit, boundMovement, inverseOperator, move, moveBack, operator, startValue, withinBounds;
          startValue = (direction === "up" || direction === "down" ? "y" : "x");
          operator = (direction === "up" || direction === "left" ? "-" : "+");
          inverseOperator = (operator === "-" ? "+" : "-");
          boundLimit = (direction === "down" ? HEIGHT : (direction === "right" ? WIDTH : 0));
          boundMovement = (operator === "-" ? ">" : "<");
          withinBounds = eval("this." + startValue + " " + operator + " " + "this." + "d" + startValue + " " + boundMovement + " " + boundLimit);
          move = "this." + startValue + " " + operator + "=" + " " + "this." + "d" + startValue;
          moveBack = "this." + startValue + " " + inverseOperator + "=" + " " + "this." + "d" + startValue;
          if (withinBounds) {
            eval(move);
            if (this.collision()) {
              eval(moveBack);
              return tiltChannel.trigger("client-collision", {
                colour: this.colour
              });
            }
          }
        };

        Square.prototype.collision = function() {
          var i, imgd, pix, _i, _ref;
          imgd = ctx.getImageData(this.x, this.y, 15, 15);
          pix = imgd.data;
          for (i = _i = 1, _ref = pix.length; _i < _ref; i = _i += 4) {
            if (pix[i] === 0) {
              return true;
            }
          }
        };

        return Square;

      })();
    }
  ]);

}).call(this);
